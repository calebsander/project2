// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 0)  set out = x & y  // bitwise and
// else         set out = x + y  // integer 2's complement addition
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    //x->zeroedx by applying zx
    Mux16(a=x, b=false, sel=zx, out=zeroedx);

    //zeroedx->nottedx by applying nx
    Not16(in=zeroedx, out=notx);
    Mux16(a=zeroedx, b=notx, sel=nx, out=nottedx);

    //y->zeroedy by applying zy
    Mux16(a=y, b=false, sel=zy, out=zeroedy);

    //zeroedy->nottedy by applying ny
    Not16(in=zeroedy, out=noty);
    Mux16(a=zeroedy, b=noty, sel=ny, out=nottedy);

    //Compute results of operations
    Add16(a=nottedx, b=nottedy, out=added);
    And16(a=nottedx, b=nottedy, out=anded);

    //Get value of out before complementing
    Mux16(a=anded, b=added, sel=f, out=rawout);

    //rawout->out by applying no
    Not16(in=rawout, out=notout);
    Mux16(a=rawout, b=notout, sel=no, out=preout); //preout is just out, but it needs to be used as an input

    //Get zr and ng and actually set out
    IsZero(in=preout, out=zr); //has to be a separate chip because out needs to be sub-bussed
    And16(a=preout, b=true, out[15]=ng); //be able to just extract the MSB
    And16(a=preout, b=true, out=out); //echo 16 bits to out
}